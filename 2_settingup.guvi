Assignment :
Understanding Templates and Bootstrap (optional)

Templates
----------

Create a new file in your templates directory called welcome.html. Open this file in your code editor, then add the following HTML:

<!DOCTYPE html>
<html>
  <head>
    <title>Flask Intro</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  </head>
  <body>
    <div class="container">
      <h1>Welcome to Flask!</h2>
      <br>
      <p>Click <a href="/">here</a> to go home.</p>
    </div>
  </body>
</html>

Save. Run your server again. What do you see now when you request http://localhost:5000/welcome? Test the link. It works but it’s not very pretty. Let’s change that. This time leave the server running as we make the changes.
Bootstrap

Okay. Let’s utilize those static folders by adding a stylesheet. Have you heard of Bootstrap? If your answer is no, then check out this blog post for details.

Download Bootstrap, then add the bootstrap.min.css and bootstrap.min.js files to your “static” folder.

Update the template:

<!DOCTYPE html>
<html>
  <head>
    <title>Flask Intro</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="static/bootstrap.min.css" rel="stylesheet" media="screen">
  </head>
  <body>
    <div class="container">
      <h1>Welcome to Flask!</h2>
      <br>
      <p>Click <a href="/">here</a> to go home.</p>
    </div>
  </body>
</html>

We just included the CSS stylesheet; we’ll add the Javascript file in a latter tutorial.

Return to your browser.

Remember that we left the server running? Well, when Flask is in debug mode, app.run(debug=True), there’s an auto-reload mechanism that kicks in on code changes. Thus, we can just press refresh in our browser and we should see the new template staring right back at us.

Nice.

======================================================
Assignment: 
Setting up the quiz application
----------------------------------

To set up the application, we will make the directory structure, copy over a CSS style sheet, and build an HTML form.

Setting up the directory structure
----------------------------------

Set up your directories like this (put it somewhere, like your home directory)::

    ~/MyFlaskTutorial_guvi
        /static
        /templates

Copy the file ``style_guvi.css`` (find it in the Github repository, in the static directory) and put it in the ``static`` directory.  We will not
discuss CSS style sheets in this tutorial.  It will just make your app look pretty.  Like magic.  [Note: don't copy any of the other files from the GitHub repo to your computer yet --- trust me, the tutorial will be better this way.]

The ``templates`` directory will hold HTML files that we will use to construct pages that
will depend on user input.

In the ``MyFlaskTutorial_guvi`` directory, we will place the main Python program that
will process requests (on the server side) and return html files to send to the client.


An HTML form
------------

None of this web app stuff means anything without HTML code.  Let's make a
simple page, then add a form.  We will use that form to demonstrate HTTP
methods, including `GET` and `POST`.  Don't worry about what they are now.
Let's get some HTML code working first.

Open a file called ``userinfo_guvi.html``, and save it to the ``templates`` directory::

    <!doctype html>
    <title>A short quiz</title>
    <link rel=stylesheet type=text/css href='{{ url_for('static',filename='style_guvi.css')}}'>
    <div class=page>
      <h1>A short quiz</h1>
      <div class=metanav>
        
        <h4>                                                                                    
          You will be asked a series of questions.                                                
          Please answer them to the best of your ability.                                         
        </h4>
        
        <form id='userinfoform_guvi' method='post' action='index_guvi' >
          <p>
    	Name: <input type='text' name='name_guvi' />
          </p>
          <p>
    	Age: <input type='text' name='age_guvi' />
          </p>
          <p>
    	<input type='submit' value='Submit_guvi' />
          </p>
        </form>
        
      </div>
    </div>
    </html>
    
Once the HTML file is written, you can view it in a web browser.  You can do this from command line.  For example, on a Mac::

     open -a /Applications/Google\ Chrome.app/ userinfo_guvi.html

For funsies, you can try entering data to the form, then clicking on Submit.  You might get an error that looks like this::

    No webpage was found for the web address: file://localhost/Users/administrator/MyFlaskTutorial/templates/index_guvi
    Error 6 (net::ERR_FILE_NOT_FOUND): The file or directory could not be found.

In the next part of the tutorial, we will build the backend that will generate the page that cannot currently be found.

An aside:  Take a look at the url_for method in the link tag. The url_for method will help figure out the css filepath.  (Alternately, you can type the URL directly instead of using url_for.)::
    
    url_for('static',filename='style_guvi.css')


